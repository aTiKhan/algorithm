using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using Chaow.Extensions;

//Chaow.Numeric.Sequence allows you to iterate over infinite sequence

namespace Chaow.Numeric.Sequence
{
    //BaseSequence is based class for infinite sequence
    public static class BaseSequence_
    {
        public static void BaseSequence()
        {
            //this example shows how to use BaseSequence

            //create a BaseSequence
            BaseSequence<BigInteger> fibo = new Fibonacci();

            //BaseSequence is the same as Collection
            //BUT BaseSequence has infinite members
            //therefore, you have to define the boundary before use as collection
            //here are the methods allowed for BaseSequence
            Console.WriteLine("sequence.ElementAt(index) to get an element in sequence");
            Console.WriteLine("\tfibo.ElementAt(6) is {0}", fibo.ElementAt(6));
            Console.WriteLine();
            Console.WriteLine("sequence.First to get the first element in sequence");
            Console.WriteLine("\tfibo.First() is {0}", fibo.First());
            Console.WriteLine();
            Console.WriteLine("sequence.First(predicate) to get the first element that match the predicate");
            Console.WriteLine("\tfibo.First(f => f > 100) is {0}", fibo.First(f => f > 100));
            Console.WriteLine();
            Console.WriteLine("sequence.Take(n) to get the first n elements in sequence");
            Console.WriteLine("\tfibo.Take(10) is {0}", fibo.Take(10).ToString(", "));
            Console.WriteLine();
            Console.WriteLine("sequence.TakeWhile(predicate) to get elements while it is still matched with predicate");
            Console.WriteLine("\tfibo.TakeWhile(f => f < 100) is {0}", fibo.TakeWhile(f => f < 100).ToString(", "));
            Console.WriteLine();
            Console.WriteLine("sequence.TakeWhile(predicate_with_index) is the same as TakeWhile(predicate), but this method provides index in the second parameter");
            Console.WriteLine("\tfibo.TakeWhile((f, i) => f <= i) is {0}", fibo.TakeWhile((f, i) => f <= i).ToString(", "));
        }

        public static void GenericSequence()
        {
            //this example shows how to create generice infinite sequence

            //you can create GenericeSequence by SequenceExt.Create(seed, selector)
            //if you omit seed, default(T) is assumed
            //below is to create odd number sequence
            var oddNum = SequenceExt.Create(1, x => x + 2);

            //show result
            Console.WriteLine(oddNum.Take(25).ToString(", "));
        }

        public static void ToSequence()
        {
            //this example shows how to transform possible infinite collection into sequence

            //create endless concat function
            Func<IEnumerable<int>, IEnumerable<int>> selfConcat = null;
            selfConcat = e => e.Concat(from ignore in new object[] {null}
                                       from item in selfConcat(e)
                                       select item);

            //you can use collection.ToSequence to transform possible infinite collection into sequence
            var loop123 = selfConcat(new[] {1, 2, 3}).ToSequence();

            //show result
            Console.WriteLine(loop123.Take(25).ToString(", "));
        }

        public static void Cycle()
        {
            //this example shows how to make an endless loop over a collection

            //you can use collection.Cycle to make an endless loop over a collection
            var loop123 = new[] {1, 2, 3}.Cycle();

            //show result
            Console.WriteLine(loop123.Take(25).ToString(", "));
        }

        public static void Sample_Generic()
        {
            //this example shows how to use GenericSequence to solve problem

            //How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
            //(Question from http://projecteuler.net)
            Console.WriteLine((from x in 2.To(100)
                               from y in SequenceExt.Create((BigInteger)x * x, n => n * x).Take(99)
                               select y).Distinct().Count());
        }
    }
}